{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:10.908799Z",
     "start_time": "2024-06-24T09:33:08.331714Z"
    }
   },
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore', category=DeprecationWarning)\n",
    "warnings.filterwarnings('ignore', category=FutureWarning)\n",
    "warnings.filterwarnings(\"ignore\", message=\"Unverified HTTPS request\")\n",
    "warnings.filterwarnings(\"ignore\", message=\"TracerWarning: torch.tensor\")\n",
    "warnings.filterwarnings(\"ignore\", message=\"using SSL with verify_certs=False is insecure.\")\n",
    "\n",
    "import opensearch_py_ml as oml\n",
    "from opensearchpy import OpenSearch\n",
    "from opensearch_py_ml.ml_models import NeuralSparseV2Model\n",
    "from opensearch_py_ml.ml_commons import MLCommonClient\n",
    "\n",
    "CLUSTER_URL = 'http://localhost:9200'\n",
    "\n",
    "def get_os_client(cluster_url = CLUSTER_URL):\n",
    "    '''\n",
    "    Get OpenSearch client\n",
    "    :param cluster_url: cluster URL like https://ml-te-netwo-1s12ba42br23v-ff1736fa7db98ff2.elb.us-west-2.amazonaws.com:443\n",
    "    :return: OpenSearch client\n",
    "    '''\n",
    "    client = OpenSearch(\n",
    "        hosts=[cluster_url],\n",
    "        verify_certs=False\n",
    "    )\n",
    "    return client \n",
    "client = get_os_client()\n",
    "ml_client = MLCommonClient(client)"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:10.911942Z",
     "start_time": "2024-06-24T09:33:10.909945Z"
    }
   },
   "cell_type": "code",
   "source": [
    "model_id = \"opensearch-project/opensearch-neural-sparse-encoding-v1\"\n",
    "folder_path = \"opensearch-project/opensearch-neural-sparse-encoding-v1\""
   ],
   "id": "58daf7593103bb2d",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:13.908404Z",
     "start_time": "2024-06-24T09:33:10.912820Z"
    }
   },
   "cell_type": "code",
   "source": [
    "pre_trained_model = NeuralSparseV2Model(model_id=model_id, folder_path=folder_path, overwrite=True)\n",
    "model_path = pre_trained_model.save_as_pt(model_id=model_id, sentences=[\"for example providing a small sentence\", \"we can add multiple sentences\"])"
   ],
   "id": "d53532178e877f12",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model file is saved to  opensearch-project/opensearch-neural-sparse-encoding-v1/opensearch-neural-sparse-encoding-v1.pt\n",
      "zip file is saved to  opensearch-project/opensearch-neural-sparse-encoding-v1/opensearch-neural-sparse-encoding-v1.zip \n",
      "\n"
     ]
    }
   ],
   "execution_count": 3
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "bert = pre_trained_model.get_bert()",
   "id": "50ae76e3b2540ef3",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "model_config_path_torch = pre_trained_model.make_model_config_json(model_format='TORCH_SCRIPT')",
   "id": "9a7189911c6a4699",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "ml_client.register_model(model_path, model_config_path_torch, isVerbose=True)",
   "id": "b29fffc1020a01df",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "persistent_settings = {\n",
    "    \"persistent\": {\n",
    "        \"plugins\": {\n",
    "            \"ml_commons\": {\n",
    "                \"allow_registering_model_via_local_file\": \"true\",\n",
    "                \"allow_registering_model_via_url\": \"true\",\n",
    "                \"only_run_on_ml_node\": \"false\",\n",
    "                \"model_access_control_enabled\": \"true\",\n",
    "                \"native_memory_threshold\": \"99\"\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "response = client.cluster.put_settings(body=persistent_settings)\n",
    "\n",
    "print(response)"
   ],
   "id": "b1647068f7f6f66f",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-25T03:15:56.694537Z",
     "start_time": "2024-06-25T03:15:56.447888Z"
    }
   },
   "cell_type": "code",
   "source": [
    "\n",
    "client.transport.perform_request(\"POST\",f\"/_plugins/_ml/_predict/sparse_encoding/psIpSZABNZ2v9RGKA__n\",body={\n",
    "  \"text_docs\": [\"China\"]\n",
    "})"
   ],
   "id": "f852ffc804325b1c",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ERROR! Session/line number was not unique in database. History logging moved to new session 181\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'inference_results': [{'output': [{'name': 'output',\n",
       "     'dataAsMap': {'response': [{'country': 0.8113095,\n",
       "        'capital': 0.12128092,\n",
       "        'usa': 0.54763097,\n",
       "        'civilization': 0.08577769,\n",
       "        'political': 0.30930677,\n",
       "        'ben': 0.12933268,\n",
       "        'america': 0.41384023,\n",
       "        'chinese': 2.233966,\n",
       "        'bank': 0.10145193,\n",
       "        'province': 0.11379999,\n",
       "        'han': 0.37640074,\n",
       "        'len': 0.08077875,\n",
       "        'geography': 0.3322514,\n",
       "        'jenny': 0.12028172,\n",
       "        'international': 0.4409741,\n",
       "        'image': 0.16184816,\n",
       "        'africa': 0.09778593,\n",
       "        'adam': 0.015588459,\n",
       "        'tao': 0.043516953,\n",
       "        'marshall': 0.174712,\n",
       "        'im': 0.041784286,\n",
       "        'corporation': 0.12695388,\n",
       "        'ai': 0.047364835,\n",
       "        'countries': 0.07680521,\n",
       "        'tiger': 0.00816874,\n",
       "        'andrew': 0.062028904,\n",
       "        'andy': 0.05723232,\n",
       "        'daniel': 0.098783664,\n",
       "        'julian': 0.23683627,\n",
       "        'korea': 0.082536094,\n",
       "        'alex': 0.12260145,\n",
       "        'wang': 0.59459865,\n",
       "        'dom': 0.055905383,\n",
       "        'global': 0.3028026,\n",
       "        'india': 0.033801712,\n",
       "        'turk': 0.028915996,\n",
       "        'foreign': 0.19232914,\n",
       "        'benjamin': 0.17225233,\n",
       "        'world': 0.4275202,\n",
       "        'government': 0.37130147,\n",
       "        'ally': 0.15135458,\n",
       "        'george': 0.24682885,\n",
       "        'steve': 0.15695705,\n",
       "        'currency': 0.3459631,\n",
       "        'europe': 0.3969318,\n",
       "        'asia': 0.8740502,\n",
       "        'asian': 0.119550645,\n",
       "        'marx': 0.022125658,\n",
       "        'union': 0.3648164,\n",
       "        'kingdom': 0.18269038,\n",
       "        'democracy': 0.3607443,\n",
       "        'china': 2.9596148,\n",
       "        'culture': 0.097371586,\n",
       "        'wall': 0.30692628,\n",
       "        'economic': 0.54884636,\n",
       "        'president': 0.06502338}]}}]}]}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 31
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "client.transport.perform_request(\"POST\",f\"/_plugins/_ml/models/psIpSZABNZ2v9RGKA__n/_predict\",body={\n",
    "  \"text_docs\": [\"China\"]\n",
    "})"
   ],
   "id": "3d1b7814dea16af7",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "client.transport.perform_request(\"POST\",f\"/plugins/ml/predict/sparse_encoding/\",body={\n",
    "  \"text_docs\": [\"hello world\", \"second doc\"]\n",
    "})"
   ],
   "id": "336a92fe99a0d48",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "pre_trained_model",
   "id": "28dd033edbfec1ad",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:18.830457Z",
     "start_time": "2024-06-24T09:33:17.896611Z"
    }
   },
   "cell_type": "code",
   "source": "model = pre_trained_model.get_model()",
   "id": "7d16246f1c5ac7b",
   "outputs": [],
   "execution_count": 4
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:18.836848Z",
     "start_time": "2024-06-24T09:33:18.831657Z"
    }
   },
   "cell_type": "code",
   "source": "model.eval()",
   "id": "c86c384d59c9286e",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NeuralSparseModel(\n",
       "  (bert): BertForMaskedLM(\n",
       "    (bert): BertModel(\n",
       "      (embeddings): BertEmbeddings(\n",
       "        (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
       "        (position_embeddings): Embedding(512, 768)\n",
       "        (token_type_embeddings): Embedding(2, 768)\n",
       "        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "      (encoder): BertEncoder(\n",
       "        (layer): ModuleList(\n",
       "          (0-11): 12 x BertLayer(\n",
       "            (attention): BertAttention(\n",
       "              (self): BertSelfAttention(\n",
       "                (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "                (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "                (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "                (dropout): Dropout(p=0.1, inplace=False)\n",
       "              )\n",
       "              (output): BertSelfOutput(\n",
       "                (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
       "                (dropout): Dropout(p=0.1, inplace=False)\n",
       "              )\n",
       "            )\n",
       "            (intermediate): BertIntermediate(\n",
       "              (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "              (intermediate_act_fn): GELUActivation()\n",
       "            )\n",
       "            (output): BertOutput(\n",
       "              (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
       "              (dropout): Dropout(p=0.1, inplace=False)\n",
       "            )\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "    )\n",
       "    (cls): BertOnlyMLMHead(\n",
       "      (predictions): BertLMPredictionHead(\n",
       "        (transform): BertPredictionHeadTransform(\n",
       "          (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "          (transform_act_fn): GELUActivation()\n",
       "          (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
       "        )\n",
       "        (decoder): Linear(in_features=768, out_features=30522, bias=True)\n",
       "      )\n",
       "    )\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-24T09:33:20.339747Z",
     "start_time": "2024-06-24T09:33:19.996977Z"
    }
   },
   "cell_type": "code",
   "source": "model(\"What's the weather in ny now?\")",
   "id": "5a7f569ffc7635ce",
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "BertForMaskedLM(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (token_type_embeddings): Embedding(2, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n  )\n  (cls): BertOnlyMLMHead(\n    (predictions): BertLMPredictionHead(\n      (transform): BertPredictionHeadTransform(\n        (dense): Linear(in_features=768, out_features=768, bias=True)\n        (transform_act_fn): GELUActivation()\n        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      )\n      (decoder): Linear(in_features=768, out_features=30522, bias=True)\n    )\n  )\n) argument after ** must be a mapping, not str",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mTypeError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[0;32mIn[6], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m \u001B[43mmodel\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mWhat\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43ms the weather in ny now?\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/PycharmProjects/opensearch-py-ml/venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1501\u001B[0m, in \u001B[0;36mModule._call_impl\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1496\u001B[0m \u001B[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001B[39;00m\n\u001B[1;32m   1497\u001B[0m \u001B[38;5;66;03m# this function, and just call forward.\u001B[39;00m\n\u001B[1;32m   1498\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m (\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_backward_hooks \u001B[38;5;129;01mor\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_backward_pre_hooks \u001B[38;5;129;01mor\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_forward_hooks \u001B[38;5;129;01mor\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_forward_pre_hooks\n\u001B[1;32m   1499\u001B[0m         \u001B[38;5;129;01mor\u001B[39;00m _global_backward_pre_hooks \u001B[38;5;129;01mor\u001B[39;00m _global_backward_hooks\n\u001B[1;32m   1500\u001B[0m         \u001B[38;5;129;01mor\u001B[39;00m _global_forward_hooks \u001B[38;5;129;01mor\u001B[39;00m _global_forward_pre_hooks):\n\u001B[0;32m-> 1501\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mforward_call\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1502\u001B[0m \u001B[38;5;66;03m# Do not call functions when jit is used\u001B[39;00m\n\u001B[1;32m   1503\u001B[0m full_backward_hooks, non_full_backward_hooks \u001B[38;5;241m=\u001B[39m [], []\n",
      "File \u001B[0;32m~/PycharmProjects/opensearch-py-ml/opensearch_py_ml/ml_models/neuralsparsemodel.py:421\u001B[0m, in \u001B[0;36mNeuralSparseModel.forward\u001B[0;34m(self, input)\u001B[0m\n\u001B[1;32m    420\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mforward\u001B[39m(\u001B[38;5;28mself\u001B[39m, \u001B[38;5;28minput\u001B[39m: \u001B[38;5;28mdict\u001B[39m[\u001B[38;5;28mstr\u001B[39m, torch\u001B[38;5;241m.\u001B[39mTensor]):\n\u001B[0;32m--> 421\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mbert(\u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39m\u001B[38;5;28minput\u001B[39m)[\u001B[38;5;241m0\u001B[39m]\n",
      "\u001B[0;31mTypeError\u001B[0m: BertForMaskedLM(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (token_type_embeddings): Embedding(2, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n  )\n  (cls): BertOnlyMLMHead(\n    (predictions): BertLMPredictionHead(\n      (transform): BertPredictionHeadTransform(\n        (dense): Linear(in_features=768, out_features=768, bias=True)\n        (transform_act_fn): GELUActivation()\n        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      )\n      (decoder): Linear(in_features=768, out_features=30522, bias=True)\n    )\n  )\n) argument after ** must be a mapping, not str"
     ]
    }
   ],
   "execution_count": 6
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-25T03:07:22.530978Z",
     "start_time": "2024-06-25T03:07:22.527724Z"
    }
   },
   "cell_type": "code",
   "source": "queries = [\"okay\",\"nice to meet you\"]",
   "id": "de32b110c63d7c9d",
   "outputs": [],
   "execution_count": 29
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-25T03:08:19.977536Z",
     "start_time": "2024-06-25T03:07:35.959503Z"
    }
   },
   "cell_type": "code",
   "source": "results = model.process_queries(queries)",
   "id": "5e176940f461dd12",
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
      "File \u001B[0;32m~/PycharmProjects/opensearch-py-ml/venv/lib/python3.9/site-packages/IPython/core/async_helpers.py:129\u001B[0m, in \u001B[0;36m_pseudo_sync_runner\u001B[0;34m(coro)\u001B[0m\n\u001B[1;32m    121\u001B[0m \u001B[38;5;250m\u001B[39m\u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m    122\u001B[0m \u001B[38;5;124;03mA runner that does not really allow async execution, and just advance the coroutine.\u001B[39;00m\n\u001B[1;32m    123\u001B[0m \n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    126\u001B[0m \u001B[38;5;124;03mCredit to Nathaniel Smith\u001B[39;00m\n\u001B[1;32m    127\u001B[0m \u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m    128\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[0;32m--> 129\u001B[0m     \u001B[43mcoro\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msend\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;28;43;01mNone\u001B[39;49;00m\u001B[43m)\u001B[49m\n\u001B[1;32m    130\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mStopIteration\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m exc:\n\u001B[1;32m    131\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m exc\u001B[38;5;241m.\u001B[39mvalue\n",
      "File \u001B[0;32m~/PycharmProjects/opensearch-py-ml/venv/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3311\u001B[0m, in \u001B[0;36mInteractiveShell.run_cell_async\u001B[0;34m(self, raw_cell, store_history, silent, shell_futures, transformed_cell, preprocessing_exc_tuple, cell_id)\u001B[0m\n\u001B[1;32m   3305\u001B[0m interactivity \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mnone\u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m silent \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mast_node_interactivity\n\u001B[1;32m   3308\u001B[0m has_raised \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mawait\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mrun_ast_nodes(code_ast\u001B[38;5;241m.\u001B[39mbody, cell_name,\n\u001B[1;32m   3309\u001B[0m        interactivity\u001B[38;5;241m=\u001B[39minteractivity, compiler\u001B[38;5;241m=\u001B[39mcompiler, result\u001B[38;5;241m=\u001B[39mresult)\n\u001B[0;32m-> 3311\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mlast_execution_succeeded \u001B[38;5;241m=\u001B[39m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[43mhas_raised\u001B[49m\n\u001B[1;32m   3312\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mlast_execution_result \u001B[38;5;241m=\u001B[39m result\n\u001B[1;32m   3314\u001B[0m \u001B[38;5;66;03m# Reset this so later displayed values do not modify the\u001B[39;00m\n\u001B[1;32m   3315\u001B[0m \u001B[38;5;66;03m# ExecutionResult\u001B[39;00m\n",
      "File \u001B[0;32m~/PycharmProjects/opensearch-py-ml/venv/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3311\u001B[0m, in \u001B[0;36mInteractiveShell.run_cell_async\u001B[0;34m(self, raw_cell, store_history, silent, shell_futures, transformed_cell, preprocessing_exc_tuple, cell_id)\u001B[0m\n\u001B[1;32m   3305\u001B[0m interactivity \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mnone\u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m silent \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mast_node_interactivity\n\u001B[1;32m   3308\u001B[0m has_raised \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mawait\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mrun_ast_nodes(code_ast\u001B[38;5;241m.\u001B[39mbody, cell_name,\n\u001B[1;32m   3309\u001B[0m        interactivity\u001B[38;5;241m=\u001B[39minteractivity, compiler\u001B[38;5;241m=\u001B[39mcompiler, result\u001B[38;5;241m=\u001B[39mresult)\n\u001B[0;32m-> 3311\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mlast_execution_succeeded \u001B[38;5;241m=\u001B[39m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[43mhas_raised\u001B[49m\n\u001B[1;32m   3312\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mlast_execution_result \u001B[38;5;241m=\u001B[39m result\n\u001B[1;32m   3314\u001B[0m \u001B[38;5;66;03m# Reset this so later displayed values do not modify the\u001B[39;00m\n\u001B[1;32m   3315\u001B[0m \u001B[38;5;66;03m# ExecutionResult\u001B[39;00m\n",
      "File \u001B[0;32m_pydevd_bundle/pydevd_cython_darwin_39_64.pyx:1187\u001B[0m, in \u001B[0;36m_pydevd_bundle.pydevd_cython_darwin_39_64.SafeCallWrapper.__call__\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32m_pydevd_bundle/pydevd_cython_darwin_39_64.pyx:627\u001B[0m, in \u001B[0;36m_pydevd_bundle.pydevd_cython_darwin_39_64.PyDBFrame.trace_dispatch\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32m_pydevd_bundle/pydevd_cython_darwin_39_64.pyx:1103\u001B[0m, in \u001B[0;36m_pydevd_bundle.pydevd_cython_darwin_39_64.PyDBFrame.trace_dispatch\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32m_pydevd_bundle/pydevd_cython_darwin_39_64.pyx:1065\u001B[0m, in \u001B[0;36m_pydevd_bundle.pydevd_cython_darwin_39_64.PyDBFrame.trace_dispatch\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32m_pydevd_bundle/pydevd_cython_darwin_39_64.pyx:585\u001B[0m, in \u001B[0;36m_pydevd_bundle.pydevd_cython_darwin_39_64.PyDBFrame.do_wait_suspend\u001B[0;34m()\u001B[0m\n",
      "File \u001B[0;32m/Applications/PyCharm.app/Contents/plugins/python/helpers/pydev/pydevd.py:1196\u001B[0m, in \u001B[0;36mPyDB.do_wait_suspend\u001B[0;34m(self, thread, frame, event, arg, send_suspend_message, is_unhandled_exception)\u001B[0m\n\u001B[1;32m   1193\u001B[0m         from_this_thread\u001B[38;5;241m.\u001B[39mappend(frame_id)\n\u001B[1;32m   1195\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_threads_suspended_single_notification\u001B[38;5;241m.\u001B[39mnotify_thread_suspended(thread_id, stop_reason):\n\u001B[0;32m-> 1196\u001B[0m     \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_do_wait_suspend\u001B[49m\u001B[43m(\u001B[49m\u001B[43mthread\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mframe\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mevent\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43marg\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43msuspend_type\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mfrom_this_thread\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m/Applications/PyCharm.app/Contents/plugins/python/helpers/pydev/pydevd.py:1211\u001B[0m, in \u001B[0;36mPyDB._do_wait_suspend\u001B[0;34m(self, thread, frame, event, arg, suspend_type, from_this_thread)\u001B[0m\n\u001B[1;32m   1208\u001B[0m             \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_call_mpl_hook()\n\u001B[1;32m   1210\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mprocess_internal_commands()\n\u001B[0;32m-> 1211\u001B[0m         \u001B[43mtime\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43msleep\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m0.01\u001B[39;49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1213\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mcancel_async_evaluation(get_current_thread_id(thread), \u001B[38;5;28mstr\u001B[39m(\u001B[38;5;28mid\u001B[39m(frame)))\n\u001B[1;32m   1215\u001B[0m \u001B[38;5;66;03m# process any stepping instructions\u001B[39;00m\n",
      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
     ]
    }
   ],
   "execution_count": 30
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-06-25T03:06:10.046610Z",
     "start_time": "2024-06-25T03:06:10.041821Z"
    }
   },
   "cell_type": "code",
   "source": "results",
   "id": "d57ce524fa8ee031",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'e': 0.19622904062271118,\n",
       " 'o': 0.003043188713490963,\n",
       " 'you': 1.234045386314392,\n",
       " 'album': 0.02091391012072563,\n",
       " 'good': 0.2156939059495926,\n",
       " 'should': 0.08640070259571075,\n",
       " 'say': 0.4730761647224426,\n",
       " 'god': 0.10582844913005829,\n",
       " 'stop': 0.2922588288784027,\n",
       " 'yes': 0.6417264342308044,\n",
       " 'friend': 0.9679573774337769,\n",
       " 'word': 0.11487306654453278,\n",
       " 'fine': 1.707934856414795,\n",
       " 'christian': 0.12458129227161407,\n",
       " 'okay': 2.6643199920654297,\n",
       " 'meeting': 1.5972845554351807,\n",
       " 'guy': 0.26919427514076233,\n",
       " 'yeah': 0.16498872637748718,\n",
       " 'happy': 1.2545279264450073,\n",
       " 'peace': 0.09120619297027588,\n",
       " 'choice': 0.1366693079471588,\n",
       " 'kiss': 0.6890770196914673,\n",
       " 'rule': 0.1543724536895752,\n",
       " 'safe': 0.25875604152679443,\n",
       " 'normal': 0.6555663347244263,\n",
       " 'chris': 0.05300136283040047,\n",
       " 'safety': 0.2379271686077118,\n",
       " 'perfect': 0.18267160654067993,\n",
       " 'agreement': 0.10524844378232956,\n",
       " 'freedom': 0.260315865278244,\n",
       " 'alex': 0.265765517950058,\n",
       " 'fair': 0.060839008539915085,\n",
       " 'adam': 0.1984279900789261,\n",
       " 'brian': 0.44602903723716736,\n",
       " 'clean': 0.01555594801902771,\n",
       " 'albert': 0.013073091395199299,\n",
       " 'un': 0.09775803983211517,\n",
       " 'charlie': 0.28480836749076843,\n",
       " 'alan': 0.478920042514801,\n",
       " 'roger': 0.13119512796401978,\n",
       " 'victor': 0.3276040256023407,\n",
       " 'accept': 0.14173583686351776,\n",
       " 'johnny': 0.1902235746383667,\n",
       " 'rachel': 0.03435313329100609,\n",
       " 'gary': 0.14804624021053314,\n",
       " 'option': 0.3844965994358063,\n",
       " 'smart': 0.1782100647687912,\n",
       " 'jerry': 0.10747330635786057,\n",
       " 'jon': 0.008137760683894157,\n",
       " 'lucas': 0.0022031813859939575,\n",
       " 'appropriate': 0.25289392471313477,\n",
       " 'comfortable': 0.29233518242836,\n",
       " 'permission': 0.317653089761734,\n",
       " 'perry': 0.049599166959524155,\n",
       " 'innocent': 0.02454475872218609,\n",
       " 'spencer': 0.31903910636901855,\n",
       " 'murphy': 0.08665193617343903,\n",
       " 'nathan': 0.15178535878658295,\n",
       " 'comfort': 0.6116225719451904,\n",
       " 'noah': 0.007594404276460409,\n",
       " 'owen': 0.2744259536266327,\n",
       " 'reed': 0.024075767025351524,\n",
       " 'honest': 0.07818123698234558,\n",
       " 'riley': 0.18939177691936493,\n",
       " 'error': 0.33391574025154114,\n",
       " 'phrase': 0.11514710634946823,\n",
       " 'survival': 0.004756089765578508,\n",
       " 'attitude': 0.1746397316455841,\n",
       " 'ok': 2.305015802383423,\n",
       " 'healthy': 0.10509241372346878,\n",
       " 'grammar': 0.5531895756721497,\n",
       " 'ya': 0.32826951146125793,\n",
       " 'amanda': 0.23619967699050903,\n",
       " 'hannah': 0.14362625777721405,\n",
       " 'blank': 0.362138956785202,\n",
       " 'mia': 0.17531181871891022,\n",
       " 'bradley': 0.19756640493869781,\n",
       " 'ashley': 0.08734780550003052,\n",
       " 'teen': 0.3554052710533142,\n",
       " 'awkward': 0.48704373836517334,\n",
       " 'milton': 0.05466946214437485,\n",
       " 'ally': 0.16533850133419037,\n",
       " 'wow': 0.15328286588191986,\n",
       " 'eden': 0.0136735700070858,\n",
       " 'alright': 1.0815335512161255,\n",
       " 'fletcher': 0.13421431183815002,\n",
       " 'allison': 0.020790621638298035,\n",
       " 'zoe': 0.3301231265068054,\n",
       " 'bates': 0.12847359478473663,\n",
       " 'trash': 0.020412493497133255,\n",
       " 'acceptable': 0.1476793736219406,\n",
       " 'dude': 0.0021075436379760504,\n",
       " 'avery': 0.1568165272474289,\n",
       " 'apology': 0.05336488038301468,\n",
       " 'shawn': 0.14634625613689423,\n",
       " 'norm': 0.30595776438713074,\n",
       " 'lydia': 0.32216545939445496,\n",
       " 'quote': 0.3051946759223938,\n",
       " 'accord': 0.0359332412481308,\n",
       " 'elf': 0.0038776223082095385,\n",
       " 'cancel': 0.563430666923523,\n",
       " 'len': 0.23607033491134644,\n",
       " 'slack': 0.31183314323425293,\n",
       " 'curt': 0.5225363969802856,\n",
       " 'to': 0.7213647961616516,\n",
       " 'like': 0.47653719782829285,\n",
       " 'people': 0.00044586253352463245,\n",
       " 'know': 0.3857059180736542,\n",
       " 'your': 0.25654762983322144,\n",
       " 'see': 0.9119873046875,\n",
       " 'love': 0.2940075397491455,\n",
       " 'become': 0.013644877821207047,\n",
       " 'someone': 0.006855893414467573,\n",
       " '##ie': 0.10894037038087845,\n",
       " 'person': 0.09918392449617386,\n",
       " 'friends': 0.08696725964546204,\n",
       " 'talk': 0.0775127112865448,\n",
       " 'smile': 0.31892257928848267,\n",
       " 'meet': 2.157607078552246,\n",
       " 'relationship': 0.06709881126880646,\n",
       " 'appearance': 0.007197285536676645,\n",
       " 'beautiful': 0.05418514460325241,\n",
       " 'mike': 0.09942560642957687,\n",
       " 'offer': 0.20099931955337524,\n",
       " 'nice': 2.7312569618225098,\n",
       " 'visit': 0.6402559876441956,\n",
       " 'contact': 0.33360907435417175,\n",
       " 'sweet': 0.39552226662635803,\n",
       " 'interview': 0.6465007066726685,\n",
       " 'dress': 0.031328219920396805,\n",
       " 'message': 0.1081746369600296,\n",
       " 'surprise': 0.3180248439311981,\n",
       " 'opportunity': 0.5968999862670898,\n",
       " 'promotion': 0.04445263370871544,\n",
       " 'laugh': 0.030438799411058426,\n",
       " 'anthony': 0.11919199675321579,\n",
       " 'kelly': 0.02379189245402813,\n",
       " 'pleasure': 0.26802611351013184,\n",
       " 'mention': 0.0663776621222496,\n",
       " 'friendly': 0.2730328440666199,\n",
       " 'favorite': 0.12911812961101532,\n",
       " 'gift': 0.09082166850566864,\n",
       " 'gay': 0.15363839268684387,\n",
       " 'birthday': 0.2506300210952759,\n",
       " 'interesting': 0.27651095390319824,\n",
       " 'welcome': 0.8030274510383606,\n",
       " 'personality': 0.47669994831085205,\n",
       " 'holiday': 0.17677223682403564,\n",
       " 'lucy': 0.3710801303386688,\n",
       " 'alien': 0.14296972751617432,\n",
       " 'hello': 0.7645847797393799,\n",
       " 'cafe': 0.05580313131213188,\n",
       " 'stranger': 0.10823850333690643,\n",
       " 'pleasant': 0.5792499780654907,\n",
       " 'glory': 0.04253664240241051,\n",
       " 'jared': 0.23288768529891968,\n",
       " 'lovely': 0.07754459232091904,\n",
       " 'happiness': 0.3971024453639984,\n",
       " 'hug': 0.5205944180488586,\n",
       " 'buddy': 0.1837269812822342,\n",
       " 'introduce': 0.19678643345832825,\n",
       " 'booth': 0.695695698261261,\n",
       " 'cute': 0.3164345920085907,\n",
       " 'ramon': 0.12484058737754822,\n",
       " 'serena': 0.23900525271892548,\n",
       " 'greeting': 0.5304954051971436,\n",
       " 'impress': 0.0021431115455925465,\n",
       " 'milo': 0.07769571244716644}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 28
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "361ba78924073430"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
